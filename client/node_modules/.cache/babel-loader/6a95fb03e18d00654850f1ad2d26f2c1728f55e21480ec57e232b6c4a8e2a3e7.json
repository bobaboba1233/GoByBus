{"ast":null,"code":"var _jsxFileName = \"E:\\\\work shit\\\\gobybus\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuth, setIsAuth] = useState(false);\n  const [isLoading, setIsLoading] = useState(true); // Добавляем состояние загрузки\n  const navigate = useNavigate();\n\n  // Общая функция для запросов с авторизацией\n  const fetchWithAuth = async (url, options = {}) => {\n    const token = localStorage.getItem('token');\n    if (!token) throw new Error('No token found');\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n    return response.json();\n  };\n\n  // Проверка аутентификации при загрузке\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          clearAuth();\n          return;\n        }\n        const user = await fetchWithAuth('http://localhost:5000/api/auth/me');\n        setUser(user);\n        setIsAuth(true);\n      } catch (err) {\n        console.error('Auth check error:', err);\n        clearAuth();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const clearAuth = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuth(false);\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const {\n        token\n      } = await response.json();\n      localStorage.setItem('token', token);\n      const user = await fetchWithAuth('http://localhost:5000/api/auth/me');\n      setUser(user);\n      setIsAuth(true);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Login error:', err);\n      clearAuth();\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const logout = () => {\n    clearAuth();\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuth,\n      isLoading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"OtmZyVAniWqjcII5LIgEATw0YKI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuth","setIsAuth","isLoading","setIsLoading","navigate","fetchWithAuth","url","options","token","localStorage","getItem","Error","response","fetch","headers","ok","status","json","checkAuth","clearAuth","err","console","error","removeItem","login","email","password","method","body","JSON","stringify","errorData","message","setItem","success","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/work shit/gobybus/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuth, setIsAuth] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true); // Добавляем состояние загрузки\r\n  const navigate = useNavigate();\r\n\r\n  // Общая функция для запросов с авторизацией\r\n  const fetchWithAuth = async (url, options = {}) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) throw new Error('No token found');\r\n\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        ...options.headers,\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Request failed with status ${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n  };\r\n\r\n  // Проверка аутентификации при загрузке\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          clearAuth();\r\n          return;\r\n        }\r\n\r\n        const user = await fetchWithAuth('http://localhost:5000/api/auth/me');\r\n        setUser(user);\r\n        setIsAuth(true);\r\n      } catch (err) {\r\n        console.error('Auth check error:', err);\r\n        clearAuth();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const clearAuth = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    setIsAuth(false);\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n\r\n      const { token } = await response.json();\r\n      localStorage.setItem('token', token);\r\n\r\n      const user = await fetchWithAuth('http://localhost:5000/api/auth/me');\r\n      setUser(user);\r\n      setIsAuth(true);\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      clearAuth();\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    clearAuth();\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider \r\n      value={{ \r\n        user, \r\n        isAuth, \r\n        isLoading,\r\n        login, \r\n        logout \r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}