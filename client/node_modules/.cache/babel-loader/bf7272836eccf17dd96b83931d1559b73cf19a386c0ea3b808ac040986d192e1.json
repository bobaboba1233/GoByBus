{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"parseRelativeUrl\", {\n  enumerable: true,\n  get: function () {\n    return parseRelativeUrl;\n  }\n});\nconst _utils = require(\"../../utils\");\nconst _querystring = require(\"./querystring\");\nfunction parseRelativeUrl(url, base, parseQuery) {\n  if (parseQuery === void 0) parseQuery = true;\n  const globalBase = new URL(typeof window === 'undefined' ? 'http://n' : (0, _utils.getLocationOrigin)());\n  const resolvedBase = base ? new URL(base, globalBase) : url.startsWith('.') ? new URL(typeof window === 'undefined' ? 'http://n' : window.location.href) : globalBase;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin\n  } = new URL(url, resolvedBase);\n  if (origin !== globalBase.origin) {\n    throw Object.defineProperty(new Error(\"invariant: invalid relative URL, router received \" + url), \"__NEXT_ERROR_CODE\", {\n      value: \"E159\",\n      enumerable: false,\n      configurable: true\n    });\n  }\n  return {\n    pathname,\n    query: parseQuery ? (0, _querystring.searchParamsToUrlQuery)(searchParams) : undefined,\n    search,\n    hash,\n    href: href.slice(origin.length)\n  };\n}","map":{"version":3,"names":["parseRelativeUrl","url","base","parseQuery","globalBase","URL","window","_utils","getLocationOrigin","resolvedBase","startsWith","location","href","pathname","searchParams","search","hash","origin","Object","defineProperty","Error","query","_querystring","searchParamsToUrlQuery","undefined","slice","length"],"sources":["C:\\Users\\богдан\\Desktop\\gobybus\\client\\node_modules\\next\\src\\shared\\lib\\router\\utils\\parse-relative-url.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\nimport { getLocationOrigin } from '../../utils'\nimport { searchParamsToUrlQuery } from './querystring'\n\nexport interface ParsedRelativeUrl {\n  hash: string\n  href: string\n  pathname: string\n  query: ParsedUrlQuery\n  search: string\n}\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n * the current origin will be parsed as relative\n */\nexport function parseRelativeUrl(\n  url: string,\n  base?: string,\n  parseQuery?: true\n): ParsedRelativeUrl\nexport function parseRelativeUrl(\n  url: string,\n  base: string | undefined,\n  parseQuery: false\n): Omit<ParsedRelativeUrl, 'query'>\nexport function parseRelativeUrl(\n  url: string,\n  base?: string,\n  parseQuery = true\n): ParsedRelativeUrl | Omit<ParsedRelativeUrl, 'query'> {\n  const globalBase = new URL(\n    typeof window === 'undefined' ? 'http://n' : getLocationOrigin()\n  )\n\n  const resolvedBase = base\n    ? new URL(base, globalBase)\n    : url.startsWith('.')\n      ? new URL(\n          typeof window === 'undefined' ? 'http://n' : window.location.href\n        )\n      : globalBase\n\n  const { pathname, searchParams, search, hash, href, origin } = new URL(\n    url,\n    resolvedBase\n  )\n\n  if (origin !== globalBase.origin) {\n    throw new Error(`invariant: invalid relative URL, router received ${url}`)\n  }\n\n  return {\n    pathname,\n    query: parseQuery ? searchParamsToUrlQuery(searchParams) : undefined,\n    search,\n    hash,\n    href: href.slice(origin.length),\n  }\n}\n"],"mappings":";;;;;+BA4BgB;;;WAAAA,gBAAA;;;uBA3BkB;6BACK;AA0BhC,SAASA,iBACdC,GAAW,EACXC,IAAa,EACbC,UAAiB;EAAjB,IAAAA,UAAA,aAAAA,UAAA,GAAa;EAEb,MAAMC,UAAA,GAAa,IAAIC,GAAA,CACrB,OAAOC,MAAA,KAAW,cAAc,aAAa,IAAAC,MAAA,CAAAC,iBAAiB;EAGhE,MAAMC,YAAA,GAAeP,IAAA,GACjB,IAAIG,GAAA,CAAIH,IAAA,EAAME,UAAA,IACdH,GAAA,CAAIS,UAAU,CAAC,OACb,IAAIL,GAAA,CACF,OAAOC,MAAA,KAAW,cAAc,aAAaA,MAAA,CAAOK,QAAQ,CAACC,IAAI,IAEnER,UAAA;EAEN,MAAM;IAAES,QAAQ;IAAEC,YAAY;IAAEC,MAAM;IAAEC,IAAI;IAAEJ,IAAI;IAAEK;EAAM,CAAE,GAAG,IAAIZ,GAAA,CACjEJ,GAAA,EACAQ,YAAA;EAGF,IAAIQ,MAAA,KAAWb,UAAA,CAAWa,MAAM,EAAE;IAChC,MAAMC,MAAA,CAAAC,cAAoE,CAApE,IAAIC,KAAA,CAAM,mDAAC,GAAmDnB,GAAA,GAA9D;aAAA;kBAAA;oBAAA;IAAmE;EAC3E;EAEA,OAAO;IACLY,QAAA;IACAQ,KAAA,EAAOlB,UAAA,GAAa,IAAAmB,YAAA,CAAAC,sBAAsB,EAACT,YAAA,IAAgBU,SAAA;IAC3DT,MAAA;IACAC,IAAA;IACAJ,IAAA,EAAMA,IAAA,CAAKa,KAAK,CAACR,MAAA,CAAOS,MAAM;EAChC;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}