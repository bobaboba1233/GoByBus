{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\n\n// Бронирование билета\nrouter.post('/book', async (req, res) => {\n  const {\n    routeId,\n    seatId,\n    passengerInfo\n  } = req.body;\n  if (!routeId || !seatId || !(passengerInfo !== null && passengerInfo !== void 0 && passengerInfo.name) || !(passengerInfo !== null && passengerInfo !== void 0 && passengerInfo.passport)) {\n    return res.status(400).json({\n      message: 'Необходимо заполнить все поля'\n    });\n  }\n  try {\n    const db = mongoose.connection;\n\n    // Проверка маршрута\n    const route = await db.collection('routes').findOne({\n      _id: new mongoose.Types.ObjectId(routeId)\n    });\n    if (!route) {\n      return res.status(404).json({\n        message: 'Маршрут не найден'\n      });\n    }\n\n    // Проверка места\n    const seat = await db.collection('seats').findOne({\n      _id: new mongoose.Types.ObjectId(seatId)\n    });\n    if (!seat || String(seat.route) !== routeId) {\n      return res.status(404).json({\n        message: 'Место не найдено или не принадлежит маршруту'\n      });\n    }\n    if (seat.isBooked) {\n      return res.status(409).json({\n        message: 'Это место уже занято'\n      });\n    }\n\n    // Сохранение билета\n    const result = await db.collection('tickets').insertOne({\n      routeId: new mongoose.Types.ObjectId(routeId),\n      seatId: new mongoose.Types.ObjectId(seatId),\n      passengerName: passengerInfo.name,\n      passport: passengerInfo.passport,\n      bookedAt: new Date()\n    });\n\n    // Обновление статуса места\n    await db.collection('seats').updateOne({\n      _id: new mongoose.Types.ObjectId(seatId)\n    }, {\n      $set: {\n        isBooked: true\n      }\n    });\n    res.status(201).json({\n      message: 'Билет успешно забронирован',\n      ticketId: result.insertedId\n    });\n  } catch (error) {\n    console.error('Ошибка бронирования:', error);\n    res.status(500).json({\n      message: 'Внутренняя ошибка сервера'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","mongoose","post","req","res","routeId","seatId","passengerInfo","body","name","passport","status","json","message","db","connection","route","collection","findOne","_id","Types","ObjectId","seat","String","isBooked","result","insertOne","passengerName","bookedAt","Date","updateOne","$set","ticketId","insertedId","error","console","module","exports"],"sources":["E:/work shit/gobybus/client/src/pages/Ticket.jsx"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst mongoose = require('mongoose');\r\n\r\n// Бронирование билета\r\nrouter.post('/book', async (req, res) => {\r\n  const { routeId, seatId, passengerInfo } = req.body;\r\n\r\n  if (!routeId || !seatId || !passengerInfo?.name || !passengerInfo?.passport) {\r\n    return res.status(400).json({ message: 'Необходимо заполнить все поля' });\r\n  }\r\n\r\n  try {\r\n    const db = mongoose.connection;\r\n\r\n    // Проверка маршрута\r\n    const route = await db.collection('routes').findOne({ _id: new mongoose.Types.ObjectId(routeId) });\r\n    if (!route) {\r\n      return res.status(404).json({ message: 'Маршрут не найден' });\r\n    }\r\n\r\n    // Проверка места\r\n    const seat = await db.collection('seats').findOne({ _id: new mongoose.Types.ObjectId(seatId) });\r\n    if (!seat || String(seat.route) !== routeId) {\r\n      return res.status(404).json({ message: 'Место не найдено или не принадлежит маршруту' });\r\n    }\r\n\r\n    if (seat.isBooked) {\r\n      return res.status(409).json({ message: 'Это место уже занято' });\r\n    }\r\n\r\n    // Сохранение билета\r\n    const result = await db.collection('tickets').insertOne({\r\n      routeId: new mongoose.Types.ObjectId(routeId),\r\n      seatId: new mongoose.Types.ObjectId(seatId),\r\n      passengerName: passengerInfo.name,\r\n      passport: passengerInfo.passport,\r\n      bookedAt: new Date()\r\n    });\r\n\r\n    // Обновление статуса места\r\n    await db.collection('seats').updateOne(\r\n      { _id: new mongoose.Types.ObjectId(seatId) },\r\n      { $set: { isBooked: true } }\r\n    );\r\n\r\n    res.status(201).json({\r\n      message: 'Билет успешно забронирован',\r\n      ticketId: result.insertedId\r\n    });\r\n  } catch (error) {\r\n    console.error('Ошибка бронирования:', error);\r\n    res.status(500).json({ message: 'Внутренняя ошибка сервера' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}