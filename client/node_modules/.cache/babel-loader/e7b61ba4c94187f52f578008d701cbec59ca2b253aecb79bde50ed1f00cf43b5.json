{"ast":null,"code":"'use client';\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  default: null,\n  handleClientScriptLoad: null,\n  initScriptLoader: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  default: function () {\n    return _default;\n  },\n  handleClientScriptLoad: function () {\n    return handleClientScriptLoad;\n  },\n  initScriptLoader: function () {\n    return initScriptLoader;\n  }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _reactdom = /*#__PURE__*/_interop_require_default._(require(\"react-dom\"));\nconst _react = /*#__PURE__*/_interop_require_wildcard._(require(\"react\"));\nconst _headmanagercontextsharedruntime = require(\"../shared/lib/head-manager-context.shared-runtime\");\nconst _setattributesfromprops = require(\"./set-attributes-from-props\");\nconst _requestidlecallback = require(\"./request-idle-callback\");\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst insertStylesheets = stylesheets => {\n  // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad\n  //\n  // Using ReactDOM.preinit to feature detect appDir and inject styles\n  // Stylesheets might have already been loaded if initialized with Script component\n  // Re-inject styles here to handle scripts loaded via handleClientScriptLoad\n  // ReactDOM.preinit handles dedup and ensures the styles are loaded only once\n  if (_reactdom.default.preinit) {\n    stylesheets.forEach(stylesheet => {\n      _reactdom.default.preinit(stylesheet, {\n        as: 'style'\n      });\n    });\n    return;\n  }\n  // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad\n  //\n  // We use this function to load styles when appdir is not detected\n  // TODO: Use React float APIs to load styles once available for pages dir\n  if (typeof window !== 'undefined') {\n    let head = document.head;\n    stylesheets.forEach(stylesheet => {\n      let link = document.createElement('link');\n      link.type = 'text/css';\n      link.rel = 'stylesheet';\n      link.href = stylesheet;\n      head.appendChild(link);\n    });\n  }\n};\nconst loadScript = props => {\n  const {\n    src,\n    id,\n    onLoad = () => {},\n    onReady = null,\n    dangerouslySetInnerHTML,\n    children = '',\n    strategy = 'afterInteractive',\n    onError,\n    stylesheets\n  } = props;\n  const cacheKey = id || src;\n  // Script has already loaded\n  if (cacheKey && LoadCache.has(cacheKey)) {\n    return;\n  }\n  // Contents of this script are already loading/loaded\n  if (ScriptCache.has(src)) {\n    LoadCache.add(cacheKey);\n    // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n    // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n    ScriptCache.get(src).then(onLoad, onError);\n    return;\n  }\n  /** Execute after the script first loaded */\n  const afterLoad = () => {\n    // Run onReady for the first time after load event\n    if (onReady) {\n      onReady();\n    }\n    // add cacheKey to LoadCache when load successfully\n    LoadCache.add(cacheKey);\n  };\n  const el = document.createElement('script');\n  const loadPromise = new Promise((resolve, reject) => {\n    el.addEventListener('load', function (e) {\n      resolve();\n      if (onLoad) {\n        onLoad.call(this, e);\n      }\n      afterLoad();\n    });\n    el.addEventListener('error', function (e) {\n      reject(e);\n    });\n  }).catch(function (e) {\n    if (onError) {\n      onError(e);\n    }\n  });\n  if (dangerouslySetInnerHTML) {\n    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n    el.innerHTML = dangerouslySetInnerHTML.__html || '';\n    afterLoad();\n  } else if (children) {\n    el.textContent = typeof children === 'string' ? children : Array.isArray(children) ? children.join('') : '';\n    afterLoad();\n  } else if (src) {\n    el.src = src;\n    // do not add cacheKey into LoadCache for remote script here\n    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n    ScriptCache.set(src, loadPromise);\n  }\n  (0, _setattributesfromprops.setAttributesFromProps)(el, props);\n  if (strategy === 'worker') {\n    el.setAttribute('type', 'text/partytown');\n  }\n  el.setAttribute('data-nscript', strategy);\n  // Load styles associated with this script\n  if (stylesheets) {\n    insertStylesheets(stylesheets);\n  }\n  document.body.appendChild(el);\n};\nfunction handleClientScriptLoad(props) {\n  const {\n    strategy = 'afterInteractive'\n  } = props;\n  if (strategy === 'lazyOnload') {\n    window.addEventListener('load', () => {\n      (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));\n    });\n  } else {\n    loadScript(props);\n  }\n}\nfunction loadLazyScript(props) {\n  if (document.readyState === 'complete') {\n    (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));\n  } else {\n    window.addEventListener('load', () => {\n      (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));\n    });\n  }\n}\nfunction addBeforeInteractiveToCache() {\n  const scripts = [...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'), ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]')];\n  scripts.forEach(script => {\n    const cacheKey = script.id || script.getAttribute('src');\n    LoadCache.add(cacheKey);\n  });\n}\nfunction initScriptLoader(scriptLoaderItems) {\n  scriptLoaderItems.forEach(handleClientScriptLoad);\n  addBeforeInteractiveToCache();\n}\n/**\n * Load a third-party scripts in an optimized way.\n *\n * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)\n */\nfunction Script(props) {\n  const {\n    id,\n    src = '',\n    onLoad = () => {},\n    onReady = null,\n    strategy = 'afterInteractive',\n    onError,\n    stylesheets,\n    ...restProps\n  } = props;\n  // Context is available only during SSR\n  const {\n    updateScripts,\n    scripts,\n    getIsSsr,\n    appDir,\n    nonce\n  } = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n  /**\n  * - First mount:\n  *   1. The useEffect for onReady executes\n  *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n  *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n  *   3. The useEffect for loadScript executes\n  *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n  *      Once the script is loaded, the onLoad and onReady will be called by then\n  *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n  *   5. The useEffect for onReady executes again\n  *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n  *   7. The useEffect for loadScript executes again\n  *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n  *\n  * - Second mount:\n  *   1. The useEffect for onReady executes\n  *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n  *      onReady is called, set hasOnReadyEffectCalled.current to true\n  *   3. The useEffect for loadScript executes\n  *   4. The script is already loaded, loadScript bails out\n  *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n  *   5. The useEffect for onReady executes again\n  *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n  *   7. The useEffect for loadScript executes again\n  *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n  */\n  const hasOnReadyEffectCalled = (0, _react.useRef)(false);\n  (0, _react.useEffect)(() => {\n    const cacheKey = id || src;\n    if (!hasOnReadyEffectCalled.current) {\n      // Run onReady if script has loaded before but component is re-mounted\n      if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n        onReady();\n      }\n      hasOnReadyEffectCalled.current = true;\n    }\n  }, [onReady, id, src]);\n  const hasLoadScriptEffectCalled = (0, _react.useRef)(false);\n  (0, _react.useEffect)(() => {\n    if (!hasLoadScriptEffectCalled.current) {\n      if (strategy === 'afterInteractive') {\n        loadScript(props);\n      } else if (strategy === 'lazyOnload') {\n        loadLazyScript(props);\n      }\n      hasLoadScriptEffectCalled.current = true;\n    }\n  }, [props, strategy]);\n  if (strategy === 'beforeInteractive' || strategy === 'worker') {\n    if (updateScripts) {\n      scripts[strategy] = (scripts[strategy] || []).concat([{\n        id,\n        src,\n        onLoad,\n        onReady,\n        onError,\n        ...restProps\n      }]);\n      updateScripts(scripts);\n    } else if (getIsSsr && getIsSsr()) {\n      // Script has already loaded during SSR\n      LoadCache.add(id || src);\n    } else if (getIsSsr && !getIsSsr()) {\n      loadScript(props);\n    }\n  }\n  // For the app directory, we need React Float to preload these scripts.\n  if (appDir) {\n    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly\n    // For other strategies injecting here ensures correct stylesheet order\n    // ReactDOM.preinit handles loading the styles in the correct order,\n    // also ensures the stylesheet is loaded only once and in a consistent manner\n    //\n    // Case 1: Styles for beforeInteractive/worker with appDir - handled here\n    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet\n    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here\n    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function\n    if (stylesheets) {\n      stylesheets.forEach(styleSrc => {\n        _reactdom.default.preinit(styleSrc, {\n          as: 'style'\n        });\n      });\n    }\n    // Before interactive scripts need to be loaded by Next.js' runtime instead\n    // of native <script> tags, because they no longer have `defer`.\n    if (strategy === 'beforeInteractive') {\n      if (!src) {\n        // For inlined scripts, we put the content in `children`.\n        if (restProps.dangerouslySetInnerHTML) {\n          // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n          restProps.children = restProps.dangerouslySetInnerHTML.__html;\n          delete restProps.dangerouslySetInnerHTML;\n        }\n        return /*#__PURE__*/(0, _jsxruntime.jsx)(\"script\", {\n          nonce: nonce,\n          dangerouslySetInnerHTML: {\n            __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([0, {\n              ...restProps,\n              id\n            }]) + \")\"\n          }\n        });\n      } else {\n        // @ts-ignore\n        _reactdom.default.preload(src, restProps.integrity ? {\n          as: 'script',\n          integrity: restProps.integrity,\n          nonce,\n          crossOrigin: restProps.crossOrigin\n        } : {\n          as: 'script',\n          nonce,\n          crossOrigin: restProps.crossOrigin\n        });\n        return /*#__PURE__*/(0, _jsxruntime.jsx)(\"script\", {\n          nonce: nonce,\n          dangerouslySetInnerHTML: {\n            __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([src, {\n              ...restProps,\n              id\n            }]) + \")\"\n          }\n        });\n      }\n    } else if (strategy === 'afterInteractive') {\n      if (src) {\n        // @ts-ignore\n        _reactdom.default.preload(src, restProps.integrity ? {\n          as: 'script',\n          integrity: restProps.integrity,\n          nonce,\n          crossOrigin: restProps.crossOrigin\n        } : {\n          as: 'script',\n          nonce,\n          crossOrigin: restProps.crossOrigin\n        });\n      }\n    }\n  }\n  return null;\n}\nObject.defineProperty(Script, '__nextScript', {\n  value: true\n});\nconst _default = Script;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["default","_default","handleClientScriptLoad","initScriptLoader","ScriptCache","Map","LoadCache","Set","insertStylesheets","stylesheets","_reactdom","preinit","forEach","stylesheet","as","window","head","document","link","createElement","type","rel","href","appendChild","loadScript","props","src","id","onLoad","onReady","dangerouslySetInnerHTML","children","strategy","onError","cacheKey","has","add","get","then","afterLoad","el","loadPromise","Promise","resolve","reject","addEventListener","e","call","catch","innerHTML","__html","textContent","Array","isArray","join","set","_setattributesfromprops","setAttributesFromProps","setAttribute","body","_requestidlecallback","requestIdleCallback","loadLazyScript","readyState","addBeforeInteractiveToCache","scripts","querySelectorAll","script","getAttribute","scriptLoaderItems","Script","restProps","updateScripts","getIsSsr","appDir","nonce","_react","useContext","_headmanagercontextsharedruntime","HeadManagerContext","hasOnReadyEffectCalled","useRef","useEffect","current","hasLoadScriptEffectCalled","concat","styleSrc","_jsxruntime","jsx","JSON","stringify","preload","integrity","crossOrigin","Object","defineProperty","value"],"sources":["C:\\Users\\богдан\\Desktop\\gobybus\\client\\node_modules\\next\\src\\client\\script.tsx"],"sourcesContent":["'use client'\n\nimport ReactDOM from 'react-dom'\nimport React, { useEffect, useContext, useRef, type JSX } from 'react'\nimport type { ScriptHTMLAttributes } from 'react'\nimport { HeadManagerContext } from '../shared/lib/head-manager-context.shared-runtime'\nimport { setAttributesFromProps } from './set-attributes-from-props'\nimport { requestIdleCallback } from './request-idle-callback'\n\nconst ScriptCache = new Map()\nconst LoadCache = new Set()\n\nexport interface ScriptProps extends ScriptHTMLAttributes<HTMLScriptElement> {\n  strategy?: 'afterInteractive' | 'lazyOnload' | 'beforeInteractive' | 'worker'\n  id?: string\n  onLoad?: (e: any) => void\n  onReady?: () => void | null\n  onError?: (e: any) => void\n  children?: React.ReactNode\n  stylesheets?: string[]\n}\n\n/**\n * @deprecated Use `ScriptProps` instead.\n */\nexport type Props = ScriptProps\n\nconst insertStylesheets = (stylesheets: string[]) => {\n  // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad\n  //\n  // Using ReactDOM.preinit to feature detect appDir and inject styles\n  // Stylesheets might have already been loaded if initialized with Script component\n  // Re-inject styles here to handle scripts loaded via handleClientScriptLoad\n  // ReactDOM.preinit handles dedup and ensures the styles are loaded only once\n  if (ReactDOM.preinit) {\n    stylesheets.forEach((stylesheet: string) => {\n      ReactDOM.preinit(stylesheet, { as: 'style' })\n    })\n\n    return\n  }\n\n  // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad\n  //\n  // We use this function to load styles when appdir is not detected\n  // TODO: Use React float APIs to load styles once available for pages dir\n  if (typeof window !== 'undefined') {\n    let head = document.head\n    stylesheets.forEach((stylesheet: string) => {\n      let link = document.createElement('link')\n\n      link.type = 'text/css'\n      link.rel = 'stylesheet'\n      link.href = stylesheet\n\n      head.appendChild(link)\n    })\n  }\n}\n\nconst loadScript = (props: ScriptProps): void => {\n  const {\n    src,\n    id,\n    onLoad = () => {},\n    onReady = null,\n    dangerouslySetInnerHTML,\n    children = '',\n    strategy = 'afterInteractive',\n    onError,\n    stylesheets,\n  } = props\n\n  const cacheKey = id || src\n\n  // Script has already loaded\n  if (cacheKey && LoadCache.has(cacheKey)) {\n    return\n  }\n\n  // Contents of this script are already loading/loaded\n  if (ScriptCache.has(src)) {\n    LoadCache.add(cacheKey)\n    // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n    // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n    ScriptCache.get(src).then(onLoad, onError)\n    return\n  }\n\n  /** Execute after the script first loaded */\n  const afterLoad = () => {\n    // Run onReady for the first time after load event\n    if (onReady) {\n      onReady()\n    }\n    // add cacheKey to LoadCache when load successfully\n    LoadCache.add(cacheKey)\n  }\n\n  const el = document.createElement('script')\n\n  const loadPromise = new Promise<void>((resolve, reject) => {\n    el.addEventListener('load', function (e) {\n      resolve()\n      if (onLoad) {\n        onLoad.call(this, e)\n      }\n      afterLoad()\n    })\n    el.addEventListener('error', function (e) {\n      reject(e)\n    })\n  }).catch(function (e) {\n    if (onError) {\n      onError(e)\n    }\n  })\n\n  if (dangerouslySetInnerHTML) {\n    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n    el.innerHTML = (dangerouslySetInnerHTML.__html as string) || ''\n\n    afterLoad()\n  } else if (children) {\n    el.textContent =\n      typeof children === 'string'\n        ? children\n        : Array.isArray(children)\n          ? children.join('')\n          : ''\n\n    afterLoad()\n  } else if (src) {\n    el.src = src\n    // do not add cacheKey into LoadCache for remote script here\n    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n\n    ScriptCache.set(src, loadPromise)\n  }\n\n  setAttributesFromProps(el, props)\n\n  if (strategy === 'worker') {\n    el.setAttribute('type', 'text/partytown')\n  }\n\n  el.setAttribute('data-nscript', strategy)\n\n  // Load styles associated with this script\n  if (stylesheets) {\n    insertStylesheets(stylesheets)\n  }\n\n  document.body.appendChild(el)\n}\n\nexport function handleClientScriptLoad(props: ScriptProps) {\n  const { strategy = 'afterInteractive' } = props\n  if (strategy === 'lazyOnload') {\n    window.addEventListener('load', () => {\n      requestIdleCallback(() => loadScript(props))\n    })\n  } else {\n    loadScript(props)\n  }\n}\n\nfunction loadLazyScript(props: ScriptProps) {\n  if (document.readyState === 'complete') {\n    requestIdleCallback(() => loadScript(props))\n  } else {\n    window.addEventListener('load', () => {\n      requestIdleCallback(() => loadScript(props))\n    })\n  }\n}\n\nfunction addBeforeInteractiveToCache() {\n  const scripts = [\n    ...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'),\n    ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]'),\n  ]\n  scripts.forEach((script) => {\n    const cacheKey = script.id || script.getAttribute('src')\n    LoadCache.add(cacheKey)\n  })\n}\n\nexport function initScriptLoader(scriptLoaderItems: ScriptProps[]) {\n  scriptLoaderItems.forEach(handleClientScriptLoad)\n  addBeforeInteractiveToCache()\n}\n\n/**\n * Load a third-party scripts in an optimized way.\n *\n * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)\n */\nfunction Script(props: ScriptProps): JSX.Element | null {\n  const {\n    id,\n    src = '',\n    onLoad = () => {},\n    onReady = null,\n    strategy = 'afterInteractive',\n    onError,\n    stylesheets,\n    ...restProps\n  } = props\n\n  // Context is available only during SSR\n  const { updateScripts, scripts, getIsSsr, appDir, nonce } =\n    useContext(HeadManagerContext)\n\n  /**\n   * - First mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n   *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n   *      Once the script is loaded, the onLoad and onReady will be called by then\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   *\n   * - Second mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n   *      onReady is called, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. The script is already loaded, loadScript bails out\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   */\n  const hasOnReadyEffectCalled = useRef(false)\n\n  useEffect(() => {\n    const cacheKey = id || src\n    if (!hasOnReadyEffectCalled.current) {\n      // Run onReady if script has loaded before but component is re-mounted\n      if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n        onReady()\n      }\n\n      hasOnReadyEffectCalled.current = true\n    }\n  }, [onReady, id, src])\n\n  const hasLoadScriptEffectCalled = useRef(false)\n\n  useEffect(() => {\n    if (!hasLoadScriptEffectCalled.current) {\n      if (strategy === 'afterInteractive') {\n        loadScript(props)\n      } else if (strategy === 'lazyOnload') {\n        loadLazyScript(props)\n      }\n\n      hasLoadScriptEffectCalled.current = true\n    }\n  }, [props, strategy])\n\n  if (strategy === 'beforeInteractive' || strategy === 'worker') {\n    if (updateScripts) {\n      scripts[strategy] = (scripts[strategy] || []).concat([\n        {\n          id,\n          src,\n          onLoad,\n          onReady,\n          onError,\n          ...restProps,\n        },\n      ])\n      updateScripts(scripts)\n    } else if (getIsSsr && getIsSsr()) {\n      // Script has already loaded during SSR\n      LoadCache.add(id || src)\n    } else if (getIsSsr && !getIsSsr()) {\n      loadScript(props)\n    }\n  }\n\n  // For the app directory, we need React Float to preload these scripts.\n  if (appDir) {\n    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly\n    // For other strategies injecting here ensures correct stylesheet order\n    // ReactDOM.preinit handles loading the styles in the correct order,\n    // also ensures the stylesheet is loaded only once and in a consistent manner\n    //\n    // Case 1: Styles for beforeInteractive/worker with appDir - handled here\n    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet\n    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here\n    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function\n    if (stylesheets) {\n      stylesheets.forEach((styleSrc) => {\n        ReactDOM.preinit(styleSrc, { as: 'style' })\n      })\n    }\n\n    // Before interactive scripts need to be loaded by Next.js' runtime instead\n    // of native <script> tags, because they no longer have `defer`.\n    if (strategy === 'beforeInteractive') {\n      if (!src) {\n        // For inlined scripts, we put the content in `children`.\n        if (restProps.dangerouslySetInnerHTML) {\n          // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n          restProps.children = restProps.dangerouslySetInnerHTML\n            .__html as string\n          delete restProps.dangerouslySetInnerHTML\n        }\n\n        return (\n          <script\n            nonce={nonce}\n            dangerouslySetInnerHTML={{\n              __html: `(self.__next_s=self.__next_s||[]).push(${JSON.stringify([\n                0,\n                { ...restProps, id },\n              ])})`,\n            }}\n          />\n        )\n      } else {\n        // @ts-ignore\n        ReactDOM.preload(\n          src,\n          restProps.integrity\n            ? {\n                as: 'script',\n                integrity: restProps.integrity,\n                nonce,\n                crossOrigin: restProps.crossOrigin,\n              }\n            : { as: 'script', nonce, crossOrigin: restProps.crossOrigin }\n        )\n        return (\n          <script\n            nonce={nonce}\n            dangerouslySetInnerHTML={{\n              __html: `(self.__next_s=self.__next_s||[]).push(${JSON.stringify([\n                src,\n                { ...restProps, id },\n              ])})`,\n            }}\n          />\n        )\n      }\n    } else if (strategy === 'afterInteractive') {\n      if (src) {\n        // @ts-ignore\n        ReactDOM.preload(\n          src,\n          restProps.integrity\n            ? {\n                as: 'script',\n                integrity: restProps.integrity,\n                nonce,\n                crossOrigin: restProps.crossOrigin,\n              }\n            : { as: 'script', nonce, crossOrigin: restProps.crossOrigin }\n        )\n      }\n    }\n  }\n\n  return null\n}\n\nObject.defineProperty(Script, '__nextScript', { value: true })\n\nexport default Script\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}