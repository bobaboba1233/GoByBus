{"ast":null,"code":"var _jsxFileName = \"E:\\\\work shit\\\\gobybus\\\\client\\\\src\\\\pages\\\\ConfirmEmail.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfirmEmail = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const [message, setMessage] = useState('');\n  const [status, setStatus] = useState('loading');\n  const navigate = useNavigate();\n  const token = searchParams.get('token');\n  useEffect(() => {\n    const confirmEmail = async () => {\n      try {\n        const res = await fetch(`http://localhost:5000/api/auth/confirm-email?token=${token}`);\n        const data = await res.json();\n        if (!res.ok) {\n          throw new Error(data.message || 'Ошибка подтверждения');\n        }\n        setMessage('✅ Email успешно подтвержден! Сейчас вы будете перенаправлены на вход...');\n        setStatus('success');\n\n        // ⏳ Через 3 секунды редиректим на /login\n        setTimeout(() => {\n          navigate('/Login');\n        }, 3000);\n      } catch (err) {\n        setMessage(`❌ ${err.message}`);\n        setStatus('error');\n      }\n    };\n    if (token) {\n      confirmEmail();\n    } else {\n      setMessage('❌ Токен не найден в ссылке');\n      setStatus('error');\n    }\n  }, [token, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: status === 'error' ? 'red' : 'green'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfirmEmail, \"SccQ8dAv/r/qTPmx0O8tXqXpdFI=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ConfirmEmail;\nexport default ConfirmEmail;\nvar _c;\n$RefreshReg$(_c, \"ConfirmEmail\");","map":{"version":3,"names":["useEffect","useState","useSearchParams","useNavigate","jsxDEV","_jsxDEV","ConfirmEmail","_s","searchParams","message","setMessage","status","setStatus","navigate","token","get","confirmEmail","res","fetch","data","json","ok","Error","setTimeout","err","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["E:/work shit/gobybus/client/src/pages/ConfirmEmail.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\n\r\nconst ConfirmEmail = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [message, setMessage] = useState('');\r\n  const [status, setStatus] = useState('loading');\r\n  const navigate = useNavigate();\r\n  const token = searchParams.get('token');\r\n\r\n  useEffect(() => {\r\n    const confirmEmail = async () => {\r\n      try {\r\n        const res = await fetch(`http://localhost:5000/api/auth/confirm-email?token=${token}`);\r\n        const data = await res.json();\r\n\r\n        if (!res.ok) {\r\n          throw new Error(data.message || 'Ошибка подтверждения');\r\n        }\r\n\r\n        setMessage('✅ Email успешно подтвержден! Сейчас вы будете перенаправлены на вход...');\r\n        setStatus('success');\r\n\r\n        // ⏳ Через 3 секунды редиректим на /login\r\n        setTimeout(() => {\r\n          navigate('/Login');\r\n        }, 3000);\r\n      } catch (err) {\r\n        setMessage(`❌ ${err.message}`);\r\n        setStatus('error');\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      confirmEmail();\r\n    } else {\r\n      setMessage('❌ Токен не найден в ссылке');\r\n      setStatus('error');\r\n    }\r\n  }, [token, navigate]);\r\n\r\n  return (\r\n    <div style={{ padding: '2rem', textAlign: 'center' }}>\r\n      <h1>Подтверждение Email</h1>\r\n      <p style={{ color: status === 'error' ? 'red' : 'green' }}>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmEmail;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,eAAe,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,YAAY,CAAC,GAAGN,eAAe,CAAC,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,SAAS,CAAC;EAC/C,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,KAAK,GAAGN,YAAY,CAACO,GAAG,CAAC,OAAO,CAAC;EAEvCf,SAAS,CAAC,MAAM;IACd,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sDAAsDJ,KAAK,EAAE,CAAC;QACtF,MAAMK,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAE7B,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACV,OAAO,IAAI,sBAAsB,CAAC;QACzD;QAEAC,UAAU,CAAC,yEAAyE,CAAC;QACrFE,SAAS,CAAC,SAAS,CAAC;;QAEpB;QACAW,UAAU,CAAC,MAAM;UACfV,QAAQ,CAAC,QAAQ,CAAC;QACpB,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZd,UAAU,CAAC,KAAKc,GAAG,CAACf,OAAO,EAAE,CAAC;QAC9BG,SAAS,CAAC,OAAO,CAAC;MACpB;IACF,CAAC;IAED,IAAIE,KAAK,EAAE;MACTE,YAAY,CAAC,CAAC;IAChB,CAAC,MAAM;MACLN,UAAU,CAAC,4BAA4B,CAAC;MACxCE,SAAS,CAAC,OAAO,CAAC;IACpB;EACF,CAAC,EAAE,CAACE,KAAK,EAAED,QAAQ,CAAC,CAAC;EAErB,oBACER,OAAA;IAAKoB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACnDvB,OAAA;MAAAuB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B3B,OAAA;MAAGoB,KAAK,EAAE;QAAEQ,KAAK,EAAEtB,MAAM,KAAK,OAAO,GAAG,KAAK,GAAG;MAAQ,CAAE;MAAAiB,QAAA,EAAEnB;IAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAACzB,EAAA,CA5CID,YAAY;EAAA,QACOJ,eAAe,EAGrBC,WAAW;AAAA;AAAA+B,EAAA,GAJxB5B,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}