const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const nodemailer = require('nodemailer');
const auth = require('../middleware/authMiddleware'); // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  service: 'mail.ru', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å Gmail
  auth: {
    user: 'bogdan.shustrov@mail.ru',  // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π email
    pass: 'tBBWFj22uFbA5dvsjFK2',   // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
  },
   tls: {
    rejectUnauthorized: false // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç —ç—Ç–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
  }
});

const sendConfirmationEmail = (email, token) => {
  const confirmationLink = `http://localhost:5000/api/auth/confirm-email?token=${token}`;

  const mailOptions = {
    from: 'bogdan.shustrov@mail.ru',  // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π email
    to: email,
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email',
    html: `
      <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π email, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:</p>
      <a href="${confirmationLink}" style="color: #0066cc; text-decoration: none;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email</a>
    `,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.log('Error sending email:', error);
    } else {
      console.log('Email sent: ' + info.response);
    }
  });
};


router.post('/register', async (req, res) => {
  try {
    const {email, password } = req.body;
    
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', { email, password }); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    console.log(password);
    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    console.log('password –¥–æ —Ö–µ—à–∞:', password);
    const hashedPassword = await bcrypt.hash(password, 12);
    const user = new User({ email, password: hashedPassword });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmationToken = crypto.randomBytes(32).toString('hex');
    user.confirmationToken = confirmationToken;
    console.log(user.password);
    await user.save();
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', user);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    sendConfirmationEmail(email, confirmationToken);
    console.log(confirmationToken);
    res.status(201).json({ message: '–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});



// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
router.get('/confirm-email', async (req, res) => {
  const { token } = req.query;
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', token);

  try {
    const user = await User.findOne({ confirmationToken: token });

    if (!user) {
      console.log('‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É');
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    }

    console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);

    user.isConfirmed = true;
    user.confirmationToken = null;

    await user.save();

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return res.redirect('http://localhost:3000/?emailConfirmed=true');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});



// –í—Ö–æ–¥
router.post('/login',  async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: '–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å' });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    console.log(await bcrypt.compare('bog2004', user.password));
    if (!user.isConfirmed) {
      return res.status(400).json({ message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email' });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }
    const token = jwt.sign(
      { userId: user.id },
      'bogdan', // ‚ö†Ô∏è –ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤ –≤–µ–∑–¥–µ
      { expiresIn: '1d' }
    );

    res.json({ token, userId: user.id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', err.message); // ‚ö†Ô∏è –¥–æ–±–∞–≤–∏–ª–∏ –ª–æ–≥
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});



// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/me', auth, async (req, res) => {
    console.log('üì® [ME] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. Headers:', req.headers);
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;
